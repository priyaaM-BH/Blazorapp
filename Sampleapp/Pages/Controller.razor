@page "/controller/start/{providerId}"
@page "/controller/next/{moduleName}"
@page "/controller/back/{moduleName}"
@page "/controller/edit/{element}"
@inherits BaseComponent
@using System.Linq;
@using System.Text.Json;
@using SampleApp.Models

@code {
    [Parameter]
    public string? providerId { get; set; }
    [Parameter]
    public string? moduleName { get; set; } = string.Empty;
    [Parameter]
    public string? element { get; set; } = string.Empty;
    private static List<ModuleEntryPoints> _ModuleEntryPointsList = new List<ModuleEntryPoints>();
    protected override void OnInitialized()
    {
        base.OnInitialized();
         
        if (providerId != null)
        {
            providerId = providerId!.ToLower();
            _ProviderInformation.providerId = providerId;
        }
        if (moduleName != null)
        {
            moduleName = moduleName!.ToLower();
        }
        if (element != null)
        {
            element = element!.ToLower();
        }
        _ModuleEntryPointsList = GetModuleEntryPointsList();
        //if (_ModuleEntryPointsList.Any(n => n.moduleName == moduleName) == false)
        //{
        //    throw new ApplicationException($"Invalid value for moduleName: {moduleName}");
        //}
        Navigate();
    }
    private List<ModuleEntryPoints> GetModuleEntryPointsList()
    {
        List<ModuleEntryPoints> navDataList = new();
        ModuleEntryPoints ModuleEntryPoints = new()
        {
            //date-of-birth is only for guest.
            entryPointPageDirectives = ["patient-selection"],
            moduleName = ModuleNames.patientselection.ToString(),
        };
        navDataList.Add(ModuleEntryPoints);

        ModuleEntryPoints = new()
        {
            //for inperson telehealth should be skipped
            entryPointPageDirectives = ["visit-reason"],
            moduleName = ModuleNames.appointment.ToString(),
        };
        navDataList.Add(ModuleEntryPoints);

        ModuleEntryPoints = new()
        {
            //patient-address is only for guest
            entryPointPageDirectives = ["patient-info"],
            moduleName = ModuleNames.patientinformation.ToString(),
        };
        navDataList.Add(ModuleEntryPoints);

        ModuleEntryPoints = new()
        {
            entryPointPageDirectives = ["insurance"],
            moduleName = ModuleNames.insurance.ToString(),
        };
        navDataList.Add(ModuleEntryPoints);

        ModuleEntryPoints = new()
        {
            entryPointPageDirectives = ["review"],
            moduleName = ModuleNames.review.ToString(),
        };
        navDataList.Add(ModuleEntryPoints);

        return navDataList;
    }
    private void Navigate()
    {
        //First get the second segment in the Controller's URL.  This drives what the Controller does.
        string secondSegment = GetSecondSegment();
        switch (secondSegment)
        {
            case "start":
                {   
                    //At the start of it all where we got the provider id.
                    //_provider = new() { providerId = providerId! };
                    //Reset the permanent data structures
                    _PatientInformationmodule = new();
                    _PatientSelectionmodule = new();
                    _AppointmentModule = new();
                    _InsuranceModule = new();

                    //Reset the wip data structures
                    _wipPatientSelectionmodule = new();
                    _wipAppointmentModule = new();
                    _wipPatientInformationmodule = new();
                    _wipInsuranceModule = new();

                    //Navigate to the first series.
                    NavigationManager.NavigateTo($"{_ModuleEntryPointsList[0].entryPointPageDirectives[0]}");
                    //TODO Make sure all landing pages in a series has the start point parameter in the URL.
                    return;
                }
            case "next":
                {
                    //At this time all submitted changes made to the data will be in the wip data structures.
                    //This is a call from a series that completed.  Sophia may have been in the series to edit 
                    //the series or be in a set of series to complete.
                    if (InEdit)
                    {   //The series was in Edit mode.
                        //Copy the relevant series' data into permanent.
                        CopyWipToPermanent(moduleName!);

                        //Navigate to the review (last series') page.  Now we are out of Edit mode again.
                        InEdit = false;
                        NavigationManager.NavigateTo($"{_ModuleEntryPointsList[^1].entryPointPageDirectives[0]}");
                        return;
                    }

                    //Not in edit mode.  Go to the next series.
                    //First find out where we are.
                    int index = _ModuleEntryPointsList.FindIndex(n => n.moduleName == moduleName);
                    if (index == -1)
                    {
                        throw new ApplicationException($"Could not find series by name: {moduleName}");
                    }
                    if (index == _ModuleEntryPointsList.Count - 2)
                    {
                        //Next up is the Review page.  Copy all wip data to permanent and then navigate to review.
                        for(int s = 0; s < _ModuleEntryPointsList.Count - 1; s++)
                        {
                            CopyWipToPermanent(_ModuleEntryPointsList[s].moduleName);
                        }
                        //Once we go to the Review page, we are out of Edit mode.
                        InEdit = false;
                        NavigationManager.NavigateTo($"{_ModuleEntryPointsList[^1].entryPointPageDirectives[0]}");
                        return;
                    }
                    //More series to process.  Navigate to the next one.
                    NavigationManager.NavigateTo($"{_ModuleEntryPointsList[index + 1].entryPointPageDirectives[0]}");
                    return;
                }
            case "back":
                {
                    //Sophia bailed out of a series.
                    //She may have been in the series to edit the series or be in the series
                    //as one in the set to complete.
                    if (InEdit)
                    {
                        //Sophia was in Edit mode in the series.  Just navigate back to the review page
                        NavigationManager.NavigateTo($"{_ModuleEntryPointsList[^1].entryPointPageDirectives[0]}");
                        return;
                    }
                    //Not in Edit mode.  Go back to the previous series.
                    int index = _ModuleEntryPointsList.FindIndex(n => n.moduleName == moduleName);

                    if (index == -1)
                    {
                        throw new ApplicationException($"Could not find series by name: {moduleName}");
                    }
                    if (index == 0)
                    {
                        throw new ApplicationException($"Encountered a go-back command while in the first series");
                    }
                    string targetUrl = SetLastDirectivesOfModule(moduleName);
                    //Navigate to the previous's series' "last" page.
                    NavigationManager.NavigateTo($"{targetUrl}");

                    //TODO note: When Sophia clicks on any Edit button in the review page, copy all permanent data first
                    //to the wip structures.

                    //If Sophia agrees to what is in review page, the review page will save off the data which includes also
                    //sending the insurance information to Cerner.  Then it takes Sophia to a confirmation page.  No talking
                    //to the controller anymore.
                    return;
                }
            case "edit":
                {
                    InEdit = true;
                    //Copy all series' permanent data over to wip.
                    for (int s = 0; s < _ModuleEntryPointsList.Count - 1; s++)
                    {
                        CopyPermanentToWip(_ModuleEntryPointsList[s].moduleName);
                    }
                    //Navigate to the relevant page in the series
                    //string pageDirective = GetPageDirectiveForElement(element!);
                    NavigationManager.NavigateTo(element);  
                    return;
                }
                //TODO Do we set isEdit off under all pertinent circumstances?
        }
    }
    private string GetSecondSegment()
    {
        Uri.TryCreate(
            NavigationManager.Uri, 
            UriKind.Absolute, 
            out Uri? uri);
        if (uri == null)
        {
            throw new ApplicationException($"Unable to parse the URL: {NavigationManager.Uri}");
        }
        string path = uri.AbsolutePath.TrimEnd('/');
        string[] segments = path.Split('/');
        if (segments.Length > 1)
        {
            return segments[2].ToLower();
        }
        else
        {
            throw new ApplicationException("Second segment not found in the URL path.");
        }
    }
    /// <summary>
    /// This is used after Sophia clicked on an Edit button in the Review page and now i in the Controller page.
    /// The controller page needs to know where to take Sophia to.
    /// </summary>
    /// <param name="element"></param>
    /// <param name="moduleName"></param>
    /// <param name="seriesPageDirective"></param>
    /// <param name="startingPoint">
    /// This is 'top' for the first page and other names/values for subsequent pages in the 
    /// same multi-page series.
    /// </param>

    //TODO: Remove the switch case for CopyPermanentToWip and CopyWipToPermanent
        private void CopyPermanentToWip(string moduleName)
    {
        switch (moduleName)
        {
            case "patientselection":
                {
                    string jsonData = System.Text.Json.JsonSerializer.Serialize(_PatientSelectionmodule);
                    _wipPatientSelectionmodule = System.Text.Json.JsonSerializer.Deserialize<PatientSelectionmodule>(jsonData)!;
                    return;
                }
            case "appointment":
                {
                    string jsonData = System.Text.Json.JsonSerializer.Serialize(_AppointmentModule);
                    _wipAppointmentModule = System.Text.Json.JsonSerializer.Deserialize<AppointmentModule>(jsonData)!;
                    return;
                }
            case "patientinformation":
                {
                    string jsonData = System.Text.Json.JsonSerializer.Serialize(_PatientInformationmodule);
                    _wipPatientInformationmodule = System.Text.Json.JsonSerializer.Deserialize<PatientInformationmodule>(jsonData)!;
                    return;
                }
            case "insurance":
                {
                    string jsonData = System.Text.Json.JsonSerializer.Serialize( _InsuranceModule);
                    _wipInsuranceModule = System.Text.Json.JsonSerializer.Deserialize<InsuranceModule>(jsonData)!;
                    return;
                }
            case "review":
                {
                    throw new ApplicationException("Review page should not have gotten here");
                }
            default:
                {
                    throw new ApplicationException($"Unknown series name: {moduleName}");
                }
        }
    }

    private string SetLastDirectivesOfModule(string moduleName)
    {
        switch (moduleName)
        {
            case "appointment":
                {
                    return BaseComponent.PatientSelectionPageDirectives.Last();
                }
            case "patientinformation":
                {
                    return BaseComponent.AppointmentPageDirectives.Last();
                }
            case "insurance":
                {
                    return BaseComponent.PatientInformationPageDirectives.Last();
                }
            case "review":
                {
                    throw new ApplicationException("Review page should not have gotten here");
                }
            default:
                {
                    throw new ApplicationException($"Unknown series name: {moduleName}");
                }
        } 
    }
    private void CopyWipToPermanent(string moduleName)
    {
        switch (moduleName)
        {
            case "patientselection":
                {
                    string jsonData = System.Text.Json.JsonSerializer.Serialize(_wipPatientSelectionmodule);
                    _PatientSelectionmodule = System.Text.Json.JsonSerializer.Deserialize<PatientSelectionmodule>(jsonData)!;
                    return;
                }
            case "appointment":
                {
                    string jsonData = System.Text.Json.JsonSerializer.Serialize(_wipAppointmentModule);
                    _AppointmentModule = System.Text.Json.JsonSerializer.Deserialize<AppointmentModule>(jsonData)!;
                    return;
                }
            case "patientinformation":
                {
                    string jsonData = System.Text.Json.JsonSerializer.Serialize(_wipPatientInformationmodule);
                    _PatientInformationmodule = System.Text.Json.JsonSerializer.Deserialize<PatientInformationmodule>(jsonData)!;
                    return;
                }
            case "insurance":
                {
                    string jsonData = System.Text.Json.JsonSerializer.Serialize(_wipInsuranceModule);
                    _InsuranceModule = System.Text.Json.JsonSerializer.Deserialize<InsuranceModule>(jsonData)!;
                    return;
                }
            case "review":
                {
                    throw new ApplicationException("Review page should not have gotten here");
                }
            default:
                {
                    throw new ApplicationException($"Unknown series name: {moduleName}");
                }
        }
    }
}
